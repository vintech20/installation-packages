Server Type: Ubuntu
Instance Type: Atleast t2.medium 

# Become root
  sudo -i 
# Set permanent Hostname (See script for that)
# Update and upgrade the server 
  apt update -y
  apt upgrade -y 

# Creade a user and grant the user sudo priveleges (See script for that)

# Switched to user created and run the below script 

THE SCRIPT: [Run script as rootuser]
===========
#!/bin/bash
# Common stages for both master and worker nodes
# This can be use as user data in launch template or launch configutions
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

sudo apt update -y
sudo apt install -y apt-transport-https -y

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

sudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
sudo apt update -y
sudo apt install -y kubelet kubeadm  containerd kubectl

# apt-mark hold will prevent the package from being automatically upgraded or removed.

sudo apt-mark hold kubelet kubeadm kubectl containerd

sudo cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

sudo cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system

sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo systemctl restart containerd

# Enable and start kubelet service
sudo systemctl daemon-reload
sudo systemctl start kubelet
sudo systemctl enable kubelet.service

=====END OF SCRIPT========

# Initialize Kubernates master by executing below commond.
  sudo kubeadm init

# After this is done, it will generate a token that is to be used to linked the worker nodes to the master node
# It will also prompt you with another series of commands to run as a regular user

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# To verify, if kubectl is working or not, run the following command.
kubectl get pods -o wide -n kube-system
OR  
kubectl get pods -A 

#You will notice from the previous command, that all the pods are running except one: ‘core-dns’. For resolving this we 
will install a # pod network. To install the weave pod network, run the following command:

kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

===========================
kubectl get nodes
kubectl get pods 
kubectl get pods --all-namespaces
===========================





  
